
// This file has been generated by the GUI designer. Do not modify.
namespace NXTCamView.Gtk.Windows
{
	public partial class MainWindow
	{
		private global::Gtk.UIManager UIManager;
		
		private global::Gtk.Action FileAction;
		
		private global::Gtk.Action ViewAction;
		
		private global::Gtk.Action ToolsAction;
		
		private global::Gtk.Action WindowAction;
		
		private global::Gtk.Action HelpAction;
		
		private global::Gtk.Action aboutAction;
		
		private global::Gtk.Action CheckAction;
		
		private global::Gtk.Action CaptureAction;
		
		private global::Gtk.Action openAction;
		
		private global::Gtk.Action saveAction;
		
		private global::Gtk.Action saveAsAction;
		
		private global::Gtk.Action quitAction;
		
		private global::Gtk.Action ColorsAction;
		
		private global::Gtk.Action TrackingAction;
		
		private global::Gtk.Action PingAction;
		
		private global::Gtk.Action connectAction;
		
		private global::Gtk.Action disconnectAction;
		
		private global::Gtk.Action EditAction;
		
		private global::Gtk.Action preferencesAction;
		
		private global::Gtk.VBox vbox1;
		
		private global::Gtk.MenuBar menubar1;
		
		private global::Gtk.Toolbar toolbar1;
		
		private global::Gtk.Statusbar statusbar;

		protected virtual void Build ()
		{
			global::Stetic.Gui.Initialize (this);
			// Widget NXTCamView.Gtk.Windows.MainWindow
			this.UIManager = new global::Gtk.UIManager ();
			global::Gtk.ActionGroup w1 = new global::Gtk.ActionGroup ("Default");
			this.FileAction = new global::Gtk.Action ("FileAction", global::Mono.Unix.Catalog.GetString ("_File"), null, null);
			this.FileAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("File");
			w1.Add (this.FileAction, null);
			this.ViewAction = new global::Gtk.Action ("ViewAction", global::Mono.Unix.Catalog.GetString ("_View"), null, null);
			this.ViewAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("View");
			w1.Add (this.ViewAction, null);
			this.ToolsAction = new global::Gtk.Action ("ToolsAction", global::Mono.Unix.Catalog.GetString ("_Tools"), null, null);
			this.ToolsAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Tools");
			w1.Add (this.ToolsAction, null);
			this.WindowAction = new global::Gtk.Action ("WindowAction", global::Mono.Unix.Catalog.GetString ("_Window"), null, null);
			this.WindowAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Window");
			w1.Add (this.WindowAction, null);
			this.HelpAction = new global::Gtk.Action ("HelpAction", global::Mono.Unix.Catalog.GetString ("_Help"), null, null);
			this.HelpAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Help");
			w1.Add (this.HelpAction, null);
			this.aboutAction = new global::Gtk.Action ("aboutAction", global::Mono.Unix.Catalog.GetString ("_About"), null, "gtk-about");
			this.aboutAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("About");
			w1.Add (this.aboutAction, null);
			this.CheckAction = new global::Gtk.Action ("CheckAction", global::Mono.Unix.Catalog.GetString ("Check "), null, null);
			this.CheckAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Check ");
			w1.Add (this.CheckAction, null);
			this.CaptureAction = new global::Gtk.Action ("CaptureAction", global::Mono.Unix.Catalog.GetString ("Capture"), global::Mono.Unix.Catalog.GetString ("Capture and image from the camera"), null);
			this.CaptureAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Capture");
			w1.Add (this.CaptureAction, null);
			this.openAction = new global::Gtk.Action ("openAction", null, null, "gtk-open");
			this.openAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Open");
			w1.Add (this.openAction, null);
			this.saveAction = new global::Gtk.Action ("saveAction", null, null, "gtk-save");
			this.saveAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Save");
			w1.Add (this.saveAction, null);
			this.saveAsAction = new global::Gtk.Action ("saveAsAction", null, null, "gtk-save-as");
			this.saveAsAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Save As");
			w1.Add (this.saveAsAction, null);
			this.quitAction = new global::Gtk.Action ("quitAction", global::Mono.Unix.Catalog.GetString ("_Quit"), null, "gtk-quit");
			this.quitAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Quit");
			w1.Add (this.quitAction, null);
			this.ColorsAction = new global::Gtk.Action ("ColorsAction", global::Mono.Unix.Catalog.GetString ("Colors"), null, null);
			this.ColorsAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Colors");
			w1.Add (this.ColorsAction, null);
			this.TrackingAction = new global::Gtk.Action ("TrackingAction", global::Mono.Unix.Catalog.GetString ("Tracking"), null, null);
			this.TrackingAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Tracking");
			w1.Add (this.TrackingAction, null);
			this.PingAction = new global::Gtk.Action ("PingAction", global::Mono.Unix.Catalog.GetString ("Ping"), null, null);
			this.PingAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Ping");
			w1.Add (this.PingAction, null);
			this.connectAction = new global::Gtk.Action ("connectAction", null, global::Mono.Unix.Catalog.GetString ("Connect to NxtCam"), "gtk-connect");
			w1.Add (this.connectAction, null);
			this.disconnectAction = new global::Gtk.Action ("disconnectAction", null, global::Mono.Unix.Catalog.GetString ("Disconnect from NxtCam"), "gtk-disconnect");
			w1.Add (this.disconnectAction, null);
			this.EditAction = new global::Gtk.Action ("EditAction", global::Mono.Unix.Catalog.GetString ("_Edit"), null, null);
			this.EditAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("Edit");
			w1.Add (this.EditAction, null);
			this.preferencesAction = new global::Gtk.Action ("preferencesAction", global::Mono.Unix.Catalog.GetString ("_Preferences"), global::Mono.Unix.Catalog.GetString ("Open preferences"), "gtk-preferences");
			this.preferencesAction.ShortLabel = global::Mono.Unix.Catalog.GetString ("_Preferences");
			w1.Add (this.preferencesAction, null);
			this.UIManager.InsertActionGroup (w1, 0);
			this.AddAccelGroup (this.UIManager.AccelGroup);
			this.Name = "NXTCamView.Gtk.Windows.MainWindow";
			this.Title = global::Mono.Unix.Catalog.GetString ("NXTCamView for Linux");
			this.Icon = global::Stetic.IconLoader.LoadIcon (this, "camera", global::Gtk.IconSize.Menu);
			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
			// Container child NXTCamView.Gtk.Windows.MainWindow.Gtk.Container+ContainerChild
			this.vbox1 = new global::Gtk.VBox ();
			this.vbox1.Name = "vbox1";
			this.vbox1.Spacing = 6;
			// Container child vbox1.Gtk.Box+BoxChild
			this.UIManager.AddUiFromString ("<ui><menubar name='menubar1'><menu name='FileAction' action='FileAction'><menuitem name='connectAction' action='connectAction'/><menuitem name='disconnectAction' action='disconnectAction'/><separator/><menuitem name='CaptureAction' action='CaptureAction'/><menuitem name='openAction' action='openAction'/><separator/><menuitem name='saveAction' action='saveAction'/><menu name='saveAsAction' action='saveAsAction'/><separator/><menuitem name='quitAction' action='quitAction'/></menu><menu name='EditAction' action='EditAction'><menuitem name='preferencesAction' action='preferencesAction'/></menu><menu name='ViewAction' action='ViewAction'><menuitem name='ColorsAction' action='ColorsAction'/><menuitem name='TrackingAction' action='TrackingAction'/></menu><menu name='ToolsAction' action='ToolsAction'><menuitem name='PingAction' action='PingAction'/></menu><menu name='WindowAction' action='WindowAction'/><menu name='HelpAction' action='HelpAction'><menuitem name='aboutAction' action='aboutAction'/></menu></menubar></ui>");
			this.menubar1 = ((global::Gtk.MenuBar)(this.UIManager.GetWidget ("/menubar1")));
			this.menubar1.Name = "menubar1";
			this.vbox1.Add (this.menubar1);
			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.menubar1]));
			w2.Position = 0;
			w2.Expand = false;
			w2.Fill = false;
			// Container child vbox1.Gtk.Box+BoxChild
			this.UIManager.AddUiFromString ("<ui><toolbar name='toolbar1'><toolitem name='connectAction' action='connectAction'/><toolitem name='disconnectAction' action='disconnectAction'/><separator/><toolitem name='CaptureAction' action='CaptureAction'/><toolitem name='preferencesAction' action='preferencesAction'/></toolbar></ui>");
			this.toolbar1 = ((global::Gtk.Toolbar)(this.UIManager.GetWidget ("/toolbar1")));
			this.toolbar1.Name = "toolbar1";
			this.toolbar1.ShowArrow = false;
			this.vbox1.Add (this.toolbar1);
			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.toolbar1]));
			w3.Position = 1;
			w3.Expand = false;
			w3.Fill = false;
			// Container child vbox1.Gtk.Box+BoxChild
			this.statusbar = new global::Gtk.Statusbar ();
			this.statusbar.Name = "statusbar";
			this.statusbar.Spacing = 6;
			this.vbox1.Add (this.statusbar);
			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.vbox1 [this.statusbar]));
			w4.PackType = ((global::Gtk.PackType)(1));
			w4.Position = 3;
			w4.Expand = false;
			w4.Fill = false;
			this.Add (this.vbox1);
			if ((this.Child != null)) {
				this.Child.ShowAll ();
			}
			this.DefaultWidth = 541;
			this.DefaultHeight = 300;
			this.Show ();
			this.aboutAction.Activated += new global::System.EventHandler (this.OnAboutActionActivated);
			this.CaptureAction.Activated += new global::System.EventHandler (this.OnCaptureActionActivated);
			this.quitAction.Activated += new global::System.EventHandler (this.OnQuitActionActivated);
			this.connectAction.Activated += new global::System.EventHandler (this.OnConnectActionActivated);
			this.disconnectAction.Activated += new global::System.EventHandler (this.OnDisconnectActionActivated);
			this.preferencesAction.Activated += new global::System.EventHandler (this.OnPreferencesActionActivated);
		}
	}
}
